{"version":3,"sources":["logo.svg","pinging.svg","fetchWithProgress.js","speedtest.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchWithProgress","url","options","Promise","resolve","reject","xhr","XMLHttpRequest","open","method","headers","Object","entries","name","value","setRequestHeader","credentials","withCredentials","progress","addEventListener","ev","loaded","total","uploadProgress","upload","result","ok","status","text","responseText","json","JSON","parse","send","body","ROOT","PING_TARGET","DOWNLOAD_SIZES","target","size","a","performance","clearResourceTimings","i","fetch","getEntriesByType","filter","e","endsWith","slice","timings","map","responseStart","requestStart","avg","reportProgress","duration","speed","length","start","now","d","downloadFile","path","p","time","event","find","s","uploadFile","ArrayBuffer","data","FormData","set","Blob","uploaded","byteLength","list","reduce","b","App","React","useState","state","setState","pingTime","setPingTime","downSpeed","setDownSpeed","pendingDownSpeed","setPendingDownSpeed","upSpeed","setUpSpeed","pendingUpSpeed","setPendingUpSpeed","downloadError","setDownloadError","uploadError","setUploadError","useEffect","pingTest","then","t","downloadTest","uploadTest","className","onClick","src","logo","alt","pingingIcon","width","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a599dfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ebd158af.svg\";","module.exports = __webpack_public_path__ + \"static/media/pinging.e8abaee4.svg\";","\r\n/**\r\n * @param {string} url\r\n * @param {object} options\r\n * @param {string} [options.method]\r\n * @param {{ [key: string]: string }} [options.headers]\r\n * @param {FormData} [options.body]\r\n * @param {string} [options.credentials]\r\n * @param {(progress: number) => void} [options.progress]\r\n * @param {(progress: number) => void} [options.uploadProgress]\r\n */\r\nexport default function fetchWithProgress (url, options={}) {\r\n    return new Promise((resolve, reject) => {\r\n        const xhr = new XMLHttpRequest();\r\n        const result = {};\r\n\r\n        xhr.open(options.method || \"GET\", url);\r\n\r\n        if (options.headers) {\r\n            for (const [name, value] of Object.entries(options.headers)) {\r\n                xhr.setRequestHeader(name, value);\r\n            }\r\n        }\r\n\r\n        if (options.credentials === \"include\") {\r\n            xhr.withCredentials = true;\r\n        }\r\n\r\n        if (options.progress) {\r\n            xhr.addEventListener(\"progress\", ev => {\r\n                options.progress((ev.loaded / ev.total) * 100);\r\n            });\r\n        }\r\n\r\n        if (options.uploadProgress) {\r\n            xhr.upload.addEventListener(\"progress\", ev => {\r\n                options.uploadProgress((ev.loaded / ev.total) * 100);\r\n            });\r\n        }\r\n\r\n        xhr.addEventListener(\"load\", ev => {\r\n            const result = {\r\n                ok: xhr.status >= 200 && xhr.status < 300,\r\n                text: () => Promise.resolve(xhr.responseText),\r\n                json: () => Promise.resolve(JSON.parse(xhr.responseText)),\r\n            };\r\n\r\n            resolve(result);\r\n        });\r\n\r\n        xhr.addEventListener(\"error\", reject);\r\n\r\n        xhr.send(options.body);\r\n    });\r\n}","import fetchWithProgress from './fetchWithProgress';\r\n\r\nconst ROOT = \"/speedtest\";\r\n\r\nconst PING_COUNT = 50;\r\nconst PING_WARMUP = 10;\r\nconst PING_TARGET = ROOT + \"/ping.txt\";\r\n\r\nconst DOWNLOAD_MIN_DURATION = 5000;\r\nconst DOWNLOAD_1MB_TARGET = ROOT + \"/1MB.bin\";\r\nconst DOWNLOAD_2MB_TARGET = ROOT + \"/2MB.bin\";\r\nconst DOWNLOAD_10MB_TARGET = ROOT + \"/10MB.bin\";\r\nconst DOWNLOAD_SIZES = [\r\n    { target: DOWNLOAD_1MB_TARGET, size: 1e6 },\r\n    { target: DOWNLOAD_2MB_TARGET, size: 2e6 },\r\n    { target: DOWNLOAD_10MB_TARGET, size: 10e6 },\r\n];\r\n\r\nconst UPLOAD_TARGET = ROOT + \"/dev/null\";\r\nconst UPLOAD_INITIAL_SIZE = 1e6;\r\nconst UPLOAD_MAX_SIZE = 10e6;\r\nconst UPLOAD_MIN_DURATION = 5000;\r\n\r\nexport async function pingTest () {\r\n    performance.clearResourceTimings();\r\n    for (let i = -PING_WARMUP; i < PING_COUNT; i++) await fetch(PING_TARGET);\r\n    /** @type {PerformanceResourceTiming[]} */\r\n    let entries = (performance.getEntriesByType(\"resource\"));\r\n    entries = entries.filter(e => e.name.endsWith(PING_TARGET));\r\n    entries = entries.slice(-PING_COUNT);\r\n    const timings = entries.map(e => e.responseStart - e.requestStart);\r\n    return avg(timings);\r\n}\r\n\r\n/**\r\n * @param {(progress: number) => void} [reportProgress]\r\n */\r\nexport async function downloadTest (reportProgress = null) {\r\n    let duration = 0;\r\n    let speed = 0;\r\n    for (let i = 0; duration < DOWNLOAD_MIN_DURATION && i < DOWNLOAD_SIZES.length; i++) {\r\n        const start = performance.now();\r\n        const d = DOWNLOAD_SIZES[i];\r\n        speed = await downloadFile(d.target, d.size, reportProgress);\r\n        duration = performance.now() - start;\r\n    }\r\n    return speed;\r\n}\r\n\r\nasync function downloadFile (path, size, progress) {\r\n    performance.clearResourceTimings();\r\n    const start = performance.now();\r\n    await fetchWithProgress(path, {\r\n        headers: {\r\n            [\"Cache-Control\"]: \"no-cache\",\r\n        },\r\n        progress: p => {\r\n            const time = performance.now() - start;\r\n            const downloaded = size * p / 100;\r\n            const speed = downloaded / time * 1000;\r\n            progress(speed);\r\n        },\r\n    });\r\n    const event = performance.getEntriesByType(\"resource\").find(e => e.name.endsWith(path));\r\n    return size / event.duration * 1000;\r\n}\r\n\r\n/**\r\n * @param {(progress: number) => void} [reportProgress]\r\n */\r\nexport async function uploadTest (reportProgress = null) {\r\n    let duration = 0;\r\n    let speed = 0;\r\n    for (let s = UPLOAD_INITIAL_SIZE; duration < UPLOAD_MIN_DURATION && s < UPLOAD_MAX_SIZE; s *= 2) {\r\n        const start = performance.now();\r\n        speed = await uploadFile(UPLOAD_TARGET, new ArrayBuffer(s), reportProgress);\r\n        duration = performance.now() - start;\r\n    }\r\n    return speed;\r\n}\r\n\r\n/**\r\n * @param {string} path\r\n * @param {ArrayBuffer} data\r\n * @param { (progress: number) => void } progress\r\n */\r\nasync function uploadFile (path, data, progress) {\r\n    performance.clearResourceTimings();\r\n    const body = new FormData();\r\n    body.set(\"data\", new Blob([data]));\r\n    const start = performance.now();\r\n    await fetchWithProgress(path, {\r\n        method: \"post\",\r\n        body,\r\n        progress: p => {\r\n            const time = performance.now() - start;\r\n            const uploaded = data.byteLength * p / 100;\r\n            const speed = uploaded / time * 1000;\r\n            progress(speed);\r\n        },\r\n    });\r\n    const event = performance.getEntriesByType(\"resource\").find(e => e.name.endsWith(path));\r\n    return data.byteLength / event.duration * 1000;\r\n}\r\n\r\n/**\r\n * @param {number[]} list\r\n */\r\nfunction avg (list) {\r\n    return list.reduce((a,b) => a + b, 0) / list.length;\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport pingingIcon from './pinging.svg';\nimport './App.css';\nimport { pingTest, downloadTest, uploadTest } from './speedtest';\n\nconst STATE_START = \"start\";\nconst STATE_TESTING_PING = \"pinging\";\nconst STATE_TESTING_DOWN = \"down\";\nconst STATE_TESTING_UPLOAD = \"upload\";\nconst STATE_COMPLETE = \"complete\";\n\nfunction App() {\n  const [ state, setState ] = React.useState(STATE_START);\n  const [ pingTime, setPingTime ] = React.useState(0);\n  const [ downSpeed, setDownSpeed ] = React.useState(0);\n  const [ pendingDownSpeed, setPendingDownSpeed ] = React.useState(0);\n  const [ upSpeed, setUpSpeed ] = React.useState(0);\n  const [ pendingUpSpeed, setPendingUpSpeed ] = React.useState(0);\n  const [ downloadError, setDownloadError ] = React.useState(null);\n  const [ uploadError, setUploadError ] = React.useState(null);\n\n  React.useEffect(() => {\n    if (state === STATE_TESTING_PING) {\n      pingTest().then(t => {\n        setState(STATE_TESTING_DOWN);\n        setPingTime(t);\n      });\n    }\n    else if (state === STATE_TESTING_DOWN) {\n      downloadTest(setPendingDownSpeed)\n      .then(setDownSpeed, setDownloadError)\n      .then(() => setState(STATE_TESTING_UPLOAD));\n    }\n    else if (state === STATE_TESTING_UPLOAD) {\n      uploadTest(setPendingUpSpeed)\n      .then(setUpSpeed, setUploadError)\n      .then(() => setState(STATE_COMPLETE));\n    }\n  }, [state]);\n\n  function reset () {\n    setState(STATE_START);\n    setPingTime(0);\n    setPendingDownSpeed(0);\n    setDownSpeed(0);\n    setPendingUpSpeed(0);\n    setUpSpeed(0);\n    setDownloadError(null);\n    setUploadError(null);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        { state === STATE_START &&\n          <button className=\"start-btn\" onClick={() => setState(STATE_TESTING_PING)}>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </button>\n        }\n        \n        { state === STATE_TESTING_PING && \n          <p>\n            Pinging <br/>\n            <img src={pingingIcon} width={400} />\n          </p>\n        }\n        { pingTime > 0 &&\n          <p>Ping Time: {pingTime.toFixed(6)} ms</p>\n        }\n        \n        {\n          downloadError ? \n          <p>Error running download test</p>\n          : (\n            state === STATE_TESTING_DOWN ?  \n            (\n              <p>\n                Running download Test <br/>\n                {(pendingDownSpeed / 1e6).toFixed(1)} MB/s\n              </p>\n            ) : \n            upSpeed > 0 &&\n              <p>Download Speed: {(downSpeed / 1e6).toFixed(1)} MB/s</p>\n          )\n        }\n\n        {\n          uploadError ? \n          <p>Error running upload test</p>\n          : (\n            state === STATE_TESTING_UPLOAD ?  \n            (\n              <p>\n                Running Upload Test <br/>\n                {(pendingUpSpeed / 1e6).toFixed(1)} MB/s\n              </p>\n            ) : \n            upSpeed > 0 &&\n              <p>Upload Speed: {(upSpeed / 1e6).toFixed(1)} MB/s</p>\n          )\n        }\n\n        { state === STATE_COMPLETE && \n          <button onClick={() => reset()}>Start Again</button>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}